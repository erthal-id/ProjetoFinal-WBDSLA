# -*- coding: utf-8 -*-
"""ProjetoFinalWBDSLA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19iRiFWakAk82BsDhRF1PgJeaWoa0x6r6
"""

!pip install GEOparse

"""# Download e tratamento dos dados"""

import GEOparse #Download dos dados do NCBI/GEO
import pandas as pd #Tratamento dos dados
import seaborn as sns #Gráficos
from matplotlib import pyplot as plt #Gráficos
from sklearn.metrics import accuracy_score #Cálculo da acurácia
from sklearn.ensemble import RandomForestClassifier #Modelo utilizado
from sklearn.model_selection import train_test_split #Partição do dataset
from sklearn.feature_selection import SelectKBest, chi2 #Seleção de features
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay #Construção da matriz confusão

gse = GEOparse.get_GEO(geo="GSE53229", destdir="./")

gse.get_type()

phenodata = gse.phenotype_data
phenodata

phenodata["type"].value_counts()

DNAmeth_phenodata = phenodata[phenodata['type']=='genomic']
DNAmeth_phenodata["type"].value_counts()

DNAmeth_phenodata["source_name_ch1"].value_counts()

DNAmeth_phenodata["data_row_count"].value_counts()

astrocitoma = list(DNAmeth_phenodata.index[DNAmeth_phenodata["source_name_ch1"] == "Human astrocytoma"])
glioblastoma = list(DNAmeth_phenodata.index[DNAmeth_phenodata["source_name_ch1"] == "Human glioblastoma"])
samples = astrocitoma + glioblastoma
type(samples)

"""## Função para formação da matriz do nível de metilação (beta-values)"""

def formar_dataframe(lista_de_amostras):

  df = pd.DataFrame(gse.gsms[lista_de_amostras[0]].table[["ID_REF","VALUE"]]) #acessa o nível de metilação da amostra em questão
  df.rename(columns={"VALUE":lista_de_amostras[0]}, inplace = True) #renomeia coluna "VALUE" para o nome da amostra
  df = df.set_index("ID_REF")  #transforma a coluna "ID_REF" em rownames
  df = df.T #transposta

  for i in range(1,len(lista_de_amostras)):
    df2 = pd.DataFrame(gse.gsms[lista_de_amostras[i]].table[["ID_REF","VALUE"]])
    df2.rename(columns={"VALUE":lista_de_amostras[i]}, inplace = True)
    df2 = df2.set_index("ID_REF")
    df2 = df2.T 
    if list(df.columns) == list(df2.columns): #confere se a ordem das probes é a mesma 
      df = pd.concat([df, df2]) #concatena iterativamente os dataframes
    else:
      df2 = df2[df.columns] #ordena caso não seja
      df = pd.concat([df, df2])  
  
  return df

"""DNA methylation beta values are continuous variables between 0 and 1, representing the ratio of the intensity of the methylated bead type to the combined locus intensity"""

methylation_matrix = formar_dataframe(samples)
methylation_matrix

methylation_matrix.index == samples #True

# 1: Astrocitoma
# 2: Glioblastoma

label = list((["1"] * 43) + ["2"] * 37)
len(label)

methylation_matrix["label"] = label
methylation_matrix

sns.countplot(x=methylation_matrix["label"])

"""## Missing values"""

methylation_matrix.shape #Dimensão da matriz de metilação de DNA

methylation_matrix.isna().sum(axis = 0).max() #Maior valor de NAs em uma coluna

methylation_matrix.isna().sum(axis = 1).max() #Maior valor de NAs em uma linha

methylation_matrix.isna().sum().sum() #Valor total de NAs no dataframe

methylation_matrix = methylation_matrix.dropna(axis = "columns") #Remove colunas com NAs
methylation_matrix.shape #Nova dimensão da matriz de metilação de DNA: 27.275 probes

"""## Feature selection
Para diminuir o número de 27.275 probes para o treinamento do modelo, foi feita uma seleção de features baseada em filtro utilizando o teste qui-quadrado
"""

#Separando as features da label
X = methylation_matrix.iloc[:, :-1]
y = methylation_matrix.iloc[:, -1]

#Seleção de features baseada em filtro
selector = SelectKBest(chi2, k=1000) #Seleciona as 1000 melhores features usando o teste qui-quadrado
X_new = selector.fit_transform(X, y)

#Obtendo as colunas selecionadas
mask = selector.get_support() #boolean array com as colunas selecionadas
new_features = X.columns[mask] #array com os nomes das colunas selecionadas

#Criando o novo dataframe apenas com as colunas selecionadas e o rótulo
filtered_methylation_matrix = methylation_matrix[list(new_features)]
filtered_methylation_matrix["label"] = label

filtered_methylation_matrix

"""## Construção do modelo

### Partição dos dados
"""

SEED = 42

X = filtered_methylation_matrix.drop(columns=["label"])
y = filtered_methylation_matrix.label

#25% para teste
Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size = 0.25, stratify = y, random_state = SEED)

print(f"Treinamento: {len(Xtrain)} e Teste: {len(Xtest)}")

Xtrain.shape

ytrain.shape

Xtest.shape

ytest.shape

"""### Treinamento e teste"""

#Treino e teste com os parâmetros padrões
model = RandomForestClassifier()
model.fit(Xtrain,ytrain)
acc = accuracy_score(ytest, model.predict(Xtest))
acc

"""A acurácia foi de 90%

### Matriz confusão
"""

ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(ytest, model.predict(Xtest)), display_labels=model.classes_).plot()
plt.title("Matriz confusão\n ")
plt.show()